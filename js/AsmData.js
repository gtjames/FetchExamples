import {getRandomInt} from './utils.js';

export let code = [
{Mnemonic:  'ADD',      Format:'R',     Width:11,     OpCode:'10001011000',   Shamt:  '',         Start:  '458',      End: '',    },
{Mnemonic:  'ADDI',     Format:'I',     Width:10,     OpCode:'1001000100',    Shamt:  'X',        Start:  '488',      End: '489', },
{Mnemonic:  'ADDIS',    Format:'I',     Width:10,     OpCode:'1011000100',    Shamt:  'X',        Start:  '588',      End: '589', },
{Mnemonic:  'ADDS',     Format:'R',     Width:11,     OpCode:'10101011000',   Shamt:  '',         Start:  '558',      End: '',    },
{Mnemonic:  'AND',      Format:'R',     Width:11,     OpCode:'10001010000',   Shamt:  '',         Start:  '45O',      End: '',    },
{Mnemonic:  'ANDI',     Format:'I',     Width:10,     OpCode:'1001001000',    Shamt:  'X',        Start:  '49O',      End: '491', },
{Mnemonic:  'ANDIS',    Format:'I',     Width:10,     OpCode:'1111001000',    Shamt:  'X',        Start:  '79O',      End: '791', },
{Mnemonic:  'ANDS',     Format:'R',     Width:11,     OpCode:'11101010000',   Shamt:  '',         Start:  '75O',      End: '',    },
{Mnemonic:  'ASL',      Format:'R',     Width:11,     OpCode:'10010011010',   Shamt:  '',         Start:  '',         End: '',    },
{Mnemonic:  'ASR',      Format:'R',     Width:11,     OpCode:'10010011010',   Shamt:  '',         Start:  '',         End: '',    },
{Mnemonic:  'B',        Format:'B',     Width:6,      OpCode:'000101',        Shamt:  'XXXX',     Start:  'OAO',      End: 'OBF', },
{Mnemonic:  'B.LT',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01011',    End: '2A7', },
{Mnemonic:  'B.LE',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01101',    End: '2A7', },
{Mnemonic:  'B.EQ',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00000',    End: '2A7', },
{Mnemonic:  'B.NE',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00001',    End: '2A7', },
{Mnemonic:  'B.GE',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01010',    End: '2A7', },
{Mnemonic:  'B.GT',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01100',    End: '2A7', },
{Mnemonic:  'B.HI',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01100',    End: '2A7', },
{Mnemonic:  'B.HS',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00010',    End: '2A7', },
{Mnemonic:  'B.LO',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00011',    End: '2A7', },
{Mnemonic:  'B.MI',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00100',    End: '2A7', },
{Mnemonic:  'B.PL',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00101',    End: '2A7', },
{Mnemonic:  'B.VS',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00110',    End: '2A7', },
{Mnemonic:  'B.VC',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '00111',    End: '2A7', },
{Mnemonic:  'B.HI',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01000',    End: '2A7', },
{Mnemonic:  'B.LS',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01001',    End: '2A7', },
{Mnemonic:  'B.AL',     Format:'CB',    Width:8,      OpCode:'01010100',      Shamt:  'XXX',      Start:  '01110',    End: '2A7', },
{Mnemonic:  'BL',       Format:'B',     Width:6,      OpCode:'100101',        Shamt:  'XXXX',     Start:  '4AO',      End: '4BF', },
{Mnemonic:  'BR',       Format:'R',     Width:11,     OpCode:'11010110000',   Shamt:  '',         Start:  '6BO',      End: '',    },
{Mnemonic:  'CBNZ',     Format:'CB',    Width:8,      OpCode:'10110101',      Shamt:  'XXX',      Start:  '5A8',      End: '5AF', },
{Mnemonic:  'CBZ',      Format:'CB',    Width:8,      OpCode:'10110100',      Shamt:  'XXX',      Start:  'SAO',      End: '5A7', },
{Mnemonic:  'EOR',      Format:'R',     Width:11,     OpCode:'11001010000',   Shamt:  '',         Start:  '65O',      End: '',    },
{Mnemonic:  'EORI',     Format:'I',     Width:10,     OpCode:'1101001000',    Shamt:  'X',        Start:  '69O',      End: '691', },
{Mnemonic:  'FADDD',    Format:'R',     Width:11,     OpCode:'00011110011',   Shamt:  '001010',   Start:  'OF3',      End: '',    },
{Mnemonic:  'FADDS',    Format:'R',     Width:11,     OpCode:'00011110001',   Shamt:  '001010',   Start:  'OF1',      End: '',    },
{Mnemonic:  'FCMPD',    Format:'R',     Width:11,     OpCode:'00011110011',   Shamt:  '001000',   Start:  'OF3',      End: '',    },
{Mnemonic:  'FCMPS',    Format:'R',     Width:11,     OpCode:'00011110001',   Shamt:  '001000',   Start:  'OF1',      End: '',    },
{Mnemonic:  'FDIVD',    Format:'R',     Width:11,     OpCode:'00011110011',   Shamt:  '000110',   Start:  'OF3',      End: '',    },
{Mnemonic:  'FDIVS',    Format:'R',     Width:11,     OpCode:'00011110001',   Shamt:  '000110',   Start:  'OF1',      End: '',    },
{Mnemonic:  'FMULD',    Format:'R',     Width:11,     OpCode:'00011110011',   Shamt:  '000010',   Start:  'OF3',      End: '',    },
{Mnemonic:  'FMULS',    Format:'R',     Width:11,     OpCode:'00011110001',   Shamt:  '000010',   Start:  'OF1',      End: '',    },
{Mnemonic:  'FSUBD',    Format:'R',     Width:11,     OpCode:'00011110011',   Shamt:  '001110',   Start:  'OF3',      End: '',    },
{Mnemonic:  'FSUBS',    Format:'R',     Width:11,     OpCode:'00011110001',   Shamt:  '001110',   Start:  'OF1',      End: '',    },
{Mnemonic:  'LDUR',     Format:'D',     Width:11,     OpCode:'11111000010',   Shamt:  '',         Start:  '7C2',      End: '',    },
{Mnemonic:  'LDURB',    Format:'D',     Width:11,     OpCode:'00111000010',   Shamt:  '',         Start:  'IC2',      End: '',    },
{Mnemonic:  'LDURD',    Format:'R',     Width:11,     OpCode:'11111100010',   Shamt:  '',         Start:  '7E2',      End: '',    },
{Mnemonic:  'LDURH',    Format:'D',     Width:11,     OpCode:'01111000010',   Shamt:  '',         Start:  '3C2',      End: '',    },
{Mnemonic:  'LDURS',    Format:'R',     Width:11,     OpCode:'10111100010',   Shamt:  '',         Start:  '5E2',      End: '',    },
{Mnemonic:  'LDURSW',   Format:'D',     Width:11,     OpCode:'10111000100',   Shamt:  '',         Start:  '5C4',      End: '',    },
{Mnemonic:  'LDXR',     Format:'D',     Width:11,     OpCode:'11001000010',   Shamt:  '',         Start:  '642',      End: '',    },
{Mnemonic:  'LSL',      Format:'R',     Width:11,     OpCode:'11010011011',   Shamt:  '',         Start:  '69B',      End: '',    },
{Mnemonic:  'LSR',      Format:'R',     Width:11,     OpCode:'11010011010',   Shamt:  '',         Start:  '69A',      End: '',    },
{Mnemonic:  'MOV',      Format:'IM',    Width:9,      OpCode:'110100101',     Shamt:  'XX',       Start:  '694',      End: '697', },
{Mnemonic:  'MOVE',     Format:'IM',    Width:9,      OpCode:'110100101',     Shamt:  'XX',       Start:  '694',      End: '697', },
{Mnemonic:  'MOVK',     Format:'IM',    Width:9,      OpCode:'111100101',     Shamt:  'XX',       Start:  '794',      End: '797', },
{Mnemonic:  'MOVZ',     Format:'IM',    Width:9,      OpCode:'110100101',     Shamt:  'XX',       Start:  '694',      End: '697', },
{Mnemonic:  'MUL',      Format:'R',     Width:11,     OpCode:'10011011000',   Shamt:  '011111',   Start:  '4D8',      End: '',    },
{Mnemonic:  'ORR',      Format:'R',     Width:11,     OpCode:'10101010000',   Shamt:  '',         Start:  '55O',      End: '',    },
{Mnemonic:  'ORRI',     Format:'I',     Width:10,     OpCode:'1011001000',    Shamt:  'X',        Start:  '59O',      End: '591', },
{Mnemonic:  'RET',      Format:'R',     Width:11,     OpCode:'11010110000',   Shamt:  '',         Start:  '6BO',      End: '',    },
{Mnemonic:  'SDIV',     Format:'R',     Width:11,     OpCode:'10011010110',   Shamt:  '000010',   Start:  '4D6',      End: '',    },
{Mnemonic:  'SMULH',    Format:'R',     Width:11,     OpCode:'10011011010',   Shamt:  '',         Start:  '4DA',      End: '',    },
{Mnemonic:  'STUR',     Format:'D',     Width:11,     OpCode:'11111000000',   Shamt:  '',         Start:  '7CO',      End: '',    },
{Mnemonic:  'STURB',    Format:'D',     Width:11,     OpCode:'00111000000',   Shamt:  '',         Start:  'ICO',      End: '',    },
{Mnemonic:  'STURD',    Format:'R',     Width:11,     OpCode:'11111100000',   Shamt:  '',         Start:  '7EO',      End: '',    },
{Mnemonic:  'STURH',    Format:'D',     Width:11,     OpCode:'01111000000',   Shamt:  '',         Start:  '3CO',      End: '',    },
{Mnemonic:  'STURS',    Format:'R',     Width:11,     OpCode:'10111100000',   Shamt:  '',         Start:  '5EO',      End: '',    },
{Mnemonic:  'STURW',    Format:'D',     Width:11,     OpCode:'10111000000',   Shamt:  '',         Start:  '5CO',      End: '',    },
{Mnemonic:  'STXR',     Format:'D',     Width:11,     OpCode:'11001000000',   Shamt:  '',         Start:  '64O',      End: '',    },
{Mnemonic:  'SUB',      Format:'R',     Width:11,     OpCode:'11001011000',   Shamt:  '',         Start:  '658',      End: '',    },
{Mnemonic:  'SUBI',     Format:'I',     Width:10,     OpCode:'1101000100',    Shamt:  'X',        Start:  '688',      End: '689', },
{Mnemonic:  'SUBIS',    Format:'I',     Width:10,     OpCode:'1111000100',    Shamt:  'X',        Start:  '788',      End: '789', },
{Mnemonic:  'SUBS',     Format:'R',     Width:11,     OpCode:'11101011000',   Shamt:  '',         Start:  '758',      End: '',    },
{Mnemonic:  'UDIV',     Format:'R',     Width:11,     OpCode:'10011010110',   Shamt:  '000011',   Start:  '4D6',      End: '',    },
{Mnemonic:  'UMULH',    Format:'R',     Width:11,     OpCode:'10011011110',   Shamt:  '',         Start:  '4DE',      End: '',    },
];

let instructions = [
{Hex: '0xAA1F03EB',    Binary: '10101010000111110000001111101011',      Instruction: 'ORR       X11,       X31,     X31       '},
{Hex: '0x5400012B',    Binary: '01010100000000000000000100101011',      Instruction: 'B.LT      DONE                          '},
{Hex: '0x5400010D',    Binary: '01010100000000000000000100001101',      Instruction: 'B.LE      DONE                          '},
{Hex: '0x540000EA',    Binary: '01010100000000000000000011101010',      Instruction: 'B.GE      DONE                          '},
{Hex: '0x540000CC',    Binary: '01010100000000000000000011001100',      Instruction: 'B.GT      DONE                          '},
{Hex: '0x540000A0',    Binary: '01010100000000000000000010100000',      Instruction: 'B.EQ      DONE                          '},
{Hex: '0x54000081',    Binary: '01010100000000000000000010000001',      Instruction: 'B.NE      DONE                          '},
{Hex: '0xCB000000',    Binary: '11001011000000000000000000000000',      Instruction: 'SUB       x0,        x0,      x0        '},
{Hex: '0x91002801',    Binary: '10010001000000000010100000000001',      Instruction: 'ADDI      x1,        x0,      0xa       '},
{Hex: '0xF1000021',    Binary: '11110001000000000000000000100001',      Instruction: 'SUBIS     x1,        x1,      0         '},
{Hex: '0x5400008D',    Binary: '01010100000000000000000010001101',      Instruction: 'B.LE      DONE                          '},
{Hex: '0xD1000421',    Binary: '11010001000000000000010000100001',      Instruction: 'SUBI      x1,        x1,      1         '},
{Hex: '0x91000800',    Binary: '10010001000000000000100000000000',      Instruction: 'ADDI      x0,        x0,      2         '},
{Hex: '0x17FFFFFC',    Binary: '00010111111111111111111111111100',      Instruction: 'B         L00P                          '},
{Hex: '0x9104C042',    Binary: '10010001000001001100000001000010',      Instruction: 'ADDI      x2,        x2,      0x130     '},
{Hex: '0xBC400042',    Binary: '10111100010000000000000001000010',      Instruction: 'LDURS     s2,        [x2,     0]        '},
{Hex: '0x9104E063',    Binary: '10010001000001001110000001100011',      Instruction: 'ADDI      x3,        x3,      0x138     '},
{Hex: '0x9400000E',    Binary: '10010100000000000000000000001110',      Instruction: 'BL        dilation                      '},
{Hex: '0x8B031044',    Binary: '10001011000000110001000001000100',      Instruction: 'ADD       x4,        x2,      x3, LSL4  '},
{Hex: '0xD10043FF',    Binary: '11010001000000000100001111111111',      Instruction: 'SUBI      sp,        sp,      0x10      '},
{Hex: '0xF80003E3',    Binary: '11111000000000000000001111100011',      Instruction: 'STUR      x3,        [sp,     0]        '},
{Hex: '0xF80003E2',    Binary: '11111000000000000000001111100010',      Instruction: 'STUR      x2,        [sp,     0]        '},
{Hex: '0xF84003E1',    Binary: '11111000010000000000001111100001',      Instruction: 'LDUR      x1,        [sp,     0]        '},
{Hex: '0x910043FF',    Binary: '10010001000000000100001111111111',      Instruction: 'ADDI      sp,        sp,      0x10      '},
{Hex: '0xF84003E1',    Binary: '11111000010000000000001111100001',      Instruction: 'LDUR      x1,        [sp,     0]        '},
{Hex: '0xD65F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR                                      '},
{Hex: '0xD100C3FF',    Binary: '11010001000000001100001111111111',      Instruction: 'SUBI      sp,        sp,      0x30      '},
{Hex: '0xF80003E1',    Binary: '11111000000000000000001111100001',      Instruction: 'STUR      x1,        [sp,     0]        '},
{Hex: '0x9104D021',    Binary: '10010001000001001101000000100001',      Instruction: 'ADDI      x1,        x1,      0x134     '},
{Hex: '0xBC400021',    Binary: '10111100010000000000000000100001',      Instruction: 'LDURS     s1,        [x1,     0]        '},
{Hex: '0x1E211843',    Binary: '00011110001000010001100001000011',      Instruction: 'FDIVS     s3,        s2,      s1        '},
{Hex: '0x1E230863',    Binary: '00011110001000110000100001100011',      Instruction: 'FMULS     s3,        s3,      s3        '},
{Hex: '0x1E233823',    Binary: '00011110001000110011100000100011',      Instruction: 'FSUBS     s3,        s1,      s3        '},
{Hex: '0x1E231823',    Binary: '00011110001000110001100000100011',      Instruction: 'FDIVS     s3,        s1,      s3        '},
{Hex: '0xBC000063',    Binary: '10111100000000000000000001100011',      Instruction: 'STURS     s3,        [x3,     0]        '},
{Hex: '0xBC4203E3',    Binary: '10111100010000100000001111100011',      Instruction: 'LDURS     s3,        [sp,     0x20]     '},
{Hex: '0xBC4103E1',    Binary: '10111100010000010000001111100001',      Instruction: 'LDURS     s1,        [sp,     0x10]     '},
{Hex: '0xF84003E1',    Binary: '11111000010000000000001111100001',      Instruction: 'LDUR      x1,        [sp,     0]        '},
{Hex: '0x9100C3FF',    Binary: '10010001000000001100001111111111',      Instruction: 'ADDI      sp,        sp,      0x30      '},
{Hex: '0xCB0D02AE',    Binary: '11001011000011010000001010101110',      Instruction: 'SUB       x14,       x21,     x13       '},
{Hex: '0xD10143FF',    Binary: '11010001000000010100001111111111',      Instruction: 'SUBI      sp,        sp,      0x50      '},
{Hex: '0xF80403FE',    Binary: '11111000000001000000001111111110',      Instruction: 'STUR      x30,       [sp,     0x40]     '},
{Hex: '0xF80303F6',    Binary: '11111000000000110000001111110110',      Instruction: 'STUR      x22,       [sp,     0x30]     '},
{Hex: '0xF80203F5',    Binary: '11111000000000100000001111110101',      Instruction: 'STUR      x21,       [sp,     0x20]     '},
{Hex: '0xF80103F4',    Binary: '11111000000000010000001111110100',      Instruction: 'STUR      x20,       [sp,     0x10]     '},
{Hex: '0xF80003F3',    Binary: '11111000000000000000001111110011',      Instruction: 'STUR      x19,       [sp,     0]        '},
{Hex: '0x5400022A',    Binary: '01010100000000000000001000101010',      Instruction: 'B.GE      exit1                         '},
{Hex: '0xD1000674',    Binary: '11010001000000000000011001110100',      Instruction: 'SUBI      x20,       x19,     1         '},
{Hex: '0x5400018B',    Binary: '01010100000000000000000110001011',      Instruction: 'B.LT      exit2                         '},
{Hex: '0xD37DF28A',    Binary: '11010011011111011111001010001010',      Instruction: 'LSL       x10,       x20,     3         '},
{Hex: '0x8B0A02AB',    Binary: '10001011000010100000001010101011',      Instruction: 'ADD       x11,       x21,     x10       '},
{Hex: '0xF840016C',    Binary: '11111000010000000000000101101100',      Instruction: 'LDUR      x12,       [x11,    0]        '},
{Hex: '0xF840816D',    Binary: '11111000010000001000000101101101',      Instruction: 'LDUR      x13,       [x11,    8]        '},
{Hex: '0x540000CD',    Binary: '01010100000000000000000011001101',      Instruction: 'B.LE      exit2                         '},
{Hex: '0x9400000C',    Binary: '10010100000000000000000000001100',      Instruction: 'BL        swap                          '},
{Hex: '0xD1000694',    Binary: '11010001000000000000011010010100',      Instruction: 'SUBI      x20,       x20,     1         '},
{Hex: '0x17FFFFF4',    Binary: '00010111111111111111111111110100',      Instruction: 'B         for2tst                       '},
{Hex: '0x91000673',    Binary: '10010001000000000000011001110011',      Instruction: 'ADDI      x19,       x19,     1         '},
{Hex: '0x17FFFFEF',    Binary: '00010111111111111111111111101111',      Instruction: 'B         for1tst                       '},
{Hex: '0xF84003F3',    Binary: '11111000010000000000001111110011',      Instruction: 'LDUR      x19,       [sp,     0]        '},
{Hex: '0xF84103F4',    Binary: '11111000010000010000001111110100',      Instruction: 'LDUR      x20,       [sp,     0x10]     '},
{Hex: '0xF84203F5',    Binary: '11111000010000100000001111110101',      Instruction: 'LDUR      x21,       [sp,     0x20]     '},
{Hex: '0xF84303F6',    Binary: '11111000010000110000001111110110',      Instruction: 'LDUR      x22,       [sp,     0x30]     '},
{Hex: '0xF84403FE',    Binary: '11111000010001000000001111111110',      Instruction: 'LDUR      x30,       [sp,     0x40]     '},
{Hex: '0x910143FF',    Binary: '10010001000000010100001111111111',      Instruction: 'ADDI      sp,        sp,      0x50      '},
{Hex: '0xD61F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR        x30                           '},
{Hex: '0xD37DF02A',    Binary: '11010011011111011111000000101010',      Instruction: 'LSL       x10,       x1,      3         '},
{Hex: '0x8B0A000A',    Binary: '10001011000010100000000000001010',      Instruction: 'ADD       x10,       x0,      x10       '},
{Hex: '0xF8400149',    Binary: '11111000010000000000000101001001',      Instruction: 'LDUR      x9,        [x10,    0]        '},
{Hex: '0xF840814B',    Binary: '11111000010000001000000101001011',      Instruction: 'LDUR      x11,       [x10,    8]        '},
{Hex: '0xF800014B',    Binary: '11111000000000000000000101001011',      Instruction: 'STUR      x11,       [x10,    0]        '},
{Hex: '0xF8008149',    Binary: '11111000000000001000000101001001',      Instruction: 'STUR      x9,        [x10,    8]        '},
{Hex: '0xD61F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR        x30                           '},
{Hex: '0xF8400021',    Binary: '11111000010000000000000000100001',      Instruction: 'LDUR      x1,        [x1,     0]        '},
{Hex: '0x97FFFFD1',    Binary: '10010111111111111111111111010001',      Instruction: 'BL        sort                          '},
{Hex: '0x540000A0',    Binary: '01010100000000000000000010100000',      Instruction: 'B.EQ      0x14                          '},
{Hex: '0xF844B421',    Binary: '11111000010001001011010000100001',      Instruction: 'LDUR      x1,        [x1,     0x968]    '}, 
{Hex: '0xB4000041',    Binary: '10110100000000000000000001000001',      Instruction: 'CBZ       x1,        8                  '},
{Hex: '0xD61F0020',    Binary: '11010110000111110000000000100000',      Instruction: 'BR        x1                            '},
{Hex: '0x9105A000',    Binary: '10010001000001011010000000000000',      Instruction: 'ADDI      x0,        x0,      0x168     '},
{Hex: '0x9106E021',    Binary: '10010001000001101110000000100001',      Instruction: 'ADDI      x1,        x1,      0x1b8     '},
{Hex: '0x913E0000',    Binary: '10010001001111100000000000000000',      Instruction: 'ADDI      x0,        x0,      0xf80     '},
{Hex: '0x913E0021',    Binary: '10010001001111100000000000100001',      Instruction: 'ADDI      x1,        x1,      0xf80     '},
{Hex: '0xCB000021',    Binary: '11001011000000000000000000100001',      Instruction: 'SUB       x1,        x1,      x0        '},
{Hex: '0x9343FC21',    Binary: '10010011010000111111110000100001',      Instruction: 'ASR       x1,        x1,      3         '},
{Hex: '0x9341FC21',    Binary: '10010011010000011111110000100001',      Instruction: 'ASR       x1,        x1,      1         '},
{Hex: '0xB40000A1',    Binary: '10110100000000000000000010100001',      Instruction: 'CBZ       x1,        0x14               '},
{Hex: '0xF844B842',    Binary: '11111000010001001011100001000010',      Instruction: 'LDUR      x2,        [x2,     0x970]    '}, 
{Hex: '0xB4000042',    Binary: '10110100000000000000000001000010',      Instruction: 'CBZ       x2,        8                  '},
{Hex: '0xD61F0040',    Binary: '11010110000111110000000001000000',      Instruction: 'BR        x2                            '},
{Hex: '0xF8000BF3',    Binary: '11111000000000000000101111110011',      Instruction: 'STUR      x19,       [sp,     0x10]     '},
{Hex: '0x97FFFFE0',    Binary: '10010111111111111111111111100000',      Instruction: 'BL        -0x80                         '},
{Hex: '0xF844BC00',    Binary: '11111000010001001011110000000000',      Instruction: 'LDUR      x0,        [x0,     0x978]    '}, 
{Hex: '0xB4000080',    Binary: '10110100000000000000000010000000',      Instruction: 'CBZ       x0,        0x10               '},
{Hex: '0x9127C000',    Binary: '10010001001001111100000000000000',      Instruction: 'ADDI      x0,        x0,      0x9f0     '},
{Hex: '0xF8400BF3',    Binary: '11111000010000000000101111110011',      Instruction: 'LDUR      x19,       [sp,     0x10]     '},
{Hex: '0xF844C000',    Binary: '11111000010001001100000000000000',      Instruction: 'LDUR      x0,        [x0,     0x980]    '}, 
{Hex: '0xB4000140',    Binary: '10110100000000000000000101000000',      Instruction: 'CBZ       x0,        0x28               '},
{Hex: '0x913E2021',    Binary: '10010001001111100010000000100001',      Instruction: 'ADDI      x1,        x1,      0xf88     '},
{Hex: '0x9127C000',    Binary: '10010001001001111100000000000000',      Instruction: 'ADDI      x0,        x0,      0x9f0     '},
{Hex: '0x17FFFFD5',    Binary: '00010111111111111111111111010101',      Instruction: 'B         -0xac                         '},
{Hex: '0x17FFFFD4',    Binary: '00010111111111111111111111010100',      Instruction: 'B         -0xb0                         '},
{Hex: '0x58000760',    Binary: '01011000000000000000011101100000',      Instruction: 'LDUR      x0,        [sp,     236]      '},
{Hex: '0xF8400401',    Binary: '11111000010000000000010000000001',      Instruction: 'LDUR      x1,        [x0,     8]        '},
{Hex: '0x940009B7',    Binary: '10010100000000000000100110110111',      Instruction: 'BL        0x26dc                        '},
{Hex: '0x580006A0',    Binary: '01011000000000000000011010100000',      Instruction: 'LDUR      x0,        [sp,     212]      '},
{Hex: '0x580006A2',    Binary: '01011000000000000000011010100010',      Instruction: 'LDUR      x2,        [sp,     212]      '},
{Hex: '0xCB000042',    Binary: '11001011000000000000000001000010',      Instruction: 'SUB       x2,        x2,      x0        '},
{Hex: '0x94000A07',    Binary: '10010100000000000000101000000111',      Instruction: 'BL        0x281c                        '},
{Hex: '0x9400119A',    Binary: '10010100000000000001000110011010',      Instruction: 'BL        0x4668                        '},
{Hex: '0x58000660',    Binary: '01011000000000000000011001100000',      Instruction: 'LDUR      x0,        [sp,     204]      '},
{Hex: '0x940009BA',    Binary: '10010100000000000000100110111010',      Instruction: 'BL        0x26e8                        '},
{Hex: '0x940009DF',    Binary: '10010100000000000000100111011111',      Instruction: 'BL        0x277c                        '},
{Hex: '0x58000628',    Binary: '01011000000000000000011000101000',      Instruction: 'LDUR      x8,        [sp,     196]      '},
{Hex: '0x58000582',    Binary: '01011000000000000000010110000010',      Instruction: 'LDUR      x2,        [sp,     176]      '},
{Hex: '0xF81F8C20',    Binary: '11111000000111111000110000100000',      Instruction: 'STUR      x0,        [x1,     -8]       '},
{Hex: '0x54FFFFA0',    Binary: '01010100111111111111111110100000',      Instruction: 'B.EQ      -0xc                          '},
{Hex: '0xD1000508',    Binary: '11010001000000000000010100001000',      Instruction: 'SUBI      x8,        x8,      1         '},
{Hex: '0xF81F8C28',    Binary: '11111000000111111000110000101000',      Instruction: 'STUR      x8,        [x1,     -8]       '},
{Hex: '0x91000400',    Binary: '10010001000000000000010000000000',      Instruction: 'ADDI      x0,        x0,      1         '},
{Hex: '0x54FFFFA1',    Binary: '01010100111111111111111110100001',      Instruction: 'B.NE      -0xc                          '},
{Hex: '0x17FFFFEE',    Binary: '00010111111111111111111111101110',      Instruction: 'B         -0x48                         '},
{Hex: '0x91000023',    Binary: '10010001000000000000000000100011',      Instruction: 'ADDI      x3,        x1,      0         '},
{Hex: '0xF85F8085',    Binary: '11111000010111111000000010000101',      Instruction: 'LDUR      x5,        [x4,     -8]       '},
{Hex: '0xF8400066',    Binary: '11111000010000000000000001100110',      Instruction: 'LDUR      x6,        [x3,     0]        '},
{Hex: '0xF81F8C86',    Binary: '11111000000111111000110010000110',      Instruction: 'STUR      x6,        [x4,     -8]       '},
{Hex: '0xF8008465',    Binary: '11111000000000001000010001100101',      Instruction: 'STUR      x5,        [x3,     8]        '},
{Hex: '0x54FFFF68',    Binary: '01010100111111111111111101101000',      Instruction: 'B.HI      -0x14                         '},
{Hex: '0x923CEC20',    Binary: '10010010001111001110110000100000',      Instruction: 'ANDI      x0,        x1,      -0x10     '},
{Hex: '0x923CEC24',    Binary: '10010010001111001110110000100100',      Instruction: 'ANDI      x4,        x1,      -0x10     '},
{Hex: '0x94000017',    Binary: '10010100000000000000000000010111',      Instruction: 'BL        0x5c                          '},
{Hex: '0x14000996',    Binary: '00010100000000000000100110010110',      Instruction: 'B         0x2658                        '},
{Hex: '0x9AC10802',    Binary: '10011010110000010000100000000010',      Instruction: 'UDIV      x2,        x0,      x1        '},
{Hex: '0x9B017C42',    Binary: '10011011000000010111110001000010',      Instruction: 'MUL       x2,        x2,      x1        '},
{Hex: '0xEB020002',    Binary: '11101011000000100000000000000010',      Instruction: 'SUBS      x2,        x0,      x2        '},
{Hex: '0x9AC10802',    Binary: '10011010110000010000100000000010',      Instruction: 'UDIV      x2,        x0,      x1        '},
{Hex: '0xD61F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR        x30                           '},
{Hex: '0x540002EA',    Binary: '01010100000000000000001011101010',      Instruction: 'B.GE      0x5c                          '},
{Hex: '0x97FFFFF0',    Binary: '10010111111111111111111111110000',      Instruction: 'BL        -0x40                         '},
{Hex: '0x5400006C',    Binary: '01010100000000000000000001101100',      Instruction: 'B.GT      0xc                           '},
{Hex: '0x910005CE',    Binary: '10010001000000000000010111001110',      Instruction: 'ADDI      x14,       x14,     1         '},
{Hex: '0x1400000E',    Binary: '00010100000000000000000000001110',      Instruction: 'B         0x38                          '},
{Hex: '0x97FFFFEA',    Binary: '10010111111111111111111111101010',      Instruction: 'BL        -0x58                         '},
{Hex: '0x5400006C',    Binary: '01010100000000000000000001101100',      Instruction: 'B.GT      0xc                           '},
{Hex: '0xCB01002A',    Binary: '11001011000000010000000000101010',      Instruction: 'SUB       x10,       x1,      x1        '},
{Hex: '0xCB01002B',    Binary: '11001011000000010000000000101011',      Instruction: 'SUB       x11,       x1,      x1        '},
{Hex: '0x1E2638C1',    Binary: '00011110001001100011100011000001',      Instruction: 'FSUB      s1,        s6,      s6        '},
{Hex: '0xBC400008',    Binary: '10111100010000000000000000001000',      Instruction: 'LDUR      s8,        [x0,      0]       '},
{Hex: '0x1E2828C6',    Binary: '00011110001010000010100011000110',      Instruction: 'FADD      s6,        s6,      s8        '},
{Hex: '0x9100054A',    Binary: '10010001000000000000010101001010',      Instruction: 'ADDI      x10,       x10,     1         '},
{Hex: '0x91001000',    Binary: '10010001000000000001000000000000',      Instruction: 'ADDI      x0,        x0,      4         '},
{Hex: '0xCB0A002C',    Binary: '11001011000010100000000000101100',      Instruction: 'SUBI      x12,       x1,      x10       '},
{Hex: '0xB5FFFF6C',    Binary: '10110101111111111111111101101100',      Instruction: 'CBNZ      x12,       -5                 '},
{Hex: '0x1E2518C1',    Binary: '00011110001001010001100011000001',      Instruction: 'FDIV      s1,        s6,      s5        '},
{Hex: '0xD61F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR        x30                           '},
{Hex: '0xCB01002A',    Binary: '11001011000000010000000000101010',      Instruction: 'SUB       x10,       x1,      x1        '},
{Hex: '0xCB01002B',    Binary: '11001011000000010000000000101011',      Instruction: 'SUB       x11,       x1,      x1        '},
{Hex: '0xBC400128',    Binary: '10111100010000000000000100101000',      Instruction: 'LDUR      s8,        [x9,     0]        '},
{Hex: '0x1E213907',    Binary: '00011110001000010011100100000111',      Instruction: 'FSUB      s7,        s8,      s1        '},
{Hex: '0x1E2708E7',    Binary: '00011110001001110000100011100111',      Instruction: 'FMUL      s7,        s7,      s7        '},
{Hex: '0x1E2728C6',    Binary: '00011110001001110010100011000110',      Instruction: 'FADD      s6,        s6,      s7        '},
{Hex: '0x9100054A',    Binary: '10010001000000000000010101001010',      Instruction: 'ADDI      x10,       x10,     1         '},
{Hex: '0x91001129',    Binary: '10010001000000000001000100101001',      Instruction: 'ADDI      x9,        x9,      4         '},
{Hex: '0xCB0A002C',    Binary: '11001011000010100000000000101100',      Instruction: 'SUB       x12,       x1,      x10       '},
{Hex: '0xB5FFFF2C',    Binary: '10110101111111111111111100101100',      Instruction: 'CBNZ      x12,       -7                 '},
{Hex: '0x1E2518C6',    Binary: '00011110001001010001100011000110',      Instruction: 'FDIV      s6,        s6,      s5        '},
{Hex: '0xD61F03C0',    Binary: '11010110000111110000001111000000',      Instruction: 'BR        x30                           '},
{Hex: '0x9104C021',    Binary: '10010001000001001100000000100001',      Instruction: 'ADDI      x1,        x1,      0x130     '},
{Hex: '0xF8400021',    Binary: '11111000010000000000000000100001',      Instruction: 'LDUR      x1,        [x1,     0]        '},
{Hex: '0x9104E000',    Binary: '10010001000001001110000000000000',      Instruction: 'ADDI      x0,        x0,      0x138     '},
{Hex: '0x91000009',    Binary: '10010001000000000000000000001001',      Instruction: 'ADDI      x9,        x0,      0         '},
{Hex: '0x97FFFFDE',    Binary: '10010111111111111111111111011110',      Instruction: 'BL        0x1218                        '},
{Hex: '0x97FFFFEA',    Binary: '10010111111111111111111111101010',      Instruction: 'BL        0x124C                        '},
];

export let CB = {
    "00000":  "EQ",      "B.EQ":  "00000", //  	Equal	Z set (zero)
    "00001":  "NE",      "B.NE":  "00001", //  	Not Equal	Z clear (not zero)
    "00010":  "CS",      "B.CS":  "00010", //  /HS	Carry Set / Unsigned Higher or Same	C set (carry)
    "00011":  "CC",      "B.CC":  "00011", //  /LO	Carry Clear / Unsigned Lower	C clear (no carry)
    "00100":  "MI",      "B.MI":  "00100", //  	Minus / Negative	N set (negative)
    "00101":  "PL",      "B.PL":  "00101", //  	Plus / Positive or Zero	N clear (positive or zero)
    "00110":  "VS",      "B.VS":  "00110", //  	Overflow	V set (overflow)
    "00111":  "VC",      "B.VC":  "00111", //  	No Overflow	V clear (no overflow)
    "01000":  "HI",      "B.HI":  "01000", //  	Unsigned Higher	C set and Z clear
    "01001":  "LS",      "B.LS":  "01001", //  	Unsigned Lower or Same	C clear or Z set
    "01010":  "GE",      "B.GE":  "01010", //  	Signed Greater or Equal	N equals V
    "01011":  "LT",      "B.LT":  "01011", //  	Signed Less Than	N not equal to V
    "01100":  "GT",      "B.GT":  "01100", //  	Signed Greater Than	Z clear and N equals V
    "01101":  "LE",      "B.LE":  "01101", //  	Signed Less Than or Equal	Z set or N not equal to V
    "01110":  "AL",      "B.AL":  "01110", //  	Always	Always execute (unconditional)
    "01111":  "NV",      "B.NV":  "01111", //  	Never	Never execute (generally not used)
    "XXXXX":  "CBNZ",    "CBNZ":  "00000", //  	CBNZ
    "XXXXX":  "CBZ",     "CBZ":   "00001", //  	CBZ
}

export function getInstructions(count) {
    let application = [];

    if (+count > 0) {
        // count = instructions.length;
        for (let i = 0; i < count; i++) {
            let rnd = getRandomInt(instructions.length);
            // let rnd = i;
            instructions[rnd].index = rnd
            application.push(instructions[rnd]);
        }
    } else {
        application = instructions.filter((i, index) => {
            if (i.Instruction.indexOf(count) >= 0)
                i.index = index;
            return i.Instruction.indexOf(count) >= 0;
    });
    }
    return application;
}

export function getInstruction(index) {
    return instructions[index];
}
