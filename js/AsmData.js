import {getRandomInt} from './utils.js';

export let code = [
{Mnemonic:'ADD',    Format:'R',     Width: 11,  OpCode:'10001011000',   Shamt:'',Start:'458',End:'',},
{Mnemonic:'ADDI',   Format:'I',     Width: 10,  OpCode:'1001000100',    Shamt:'X',Start:'488',End:'489',},
{Mnemonic:'ADDIS',  Format:'I',     Width: 10,  OpCode:'1011000100',    Shamt:'X',Start:'588',End:'589',},
{Mnemonic:'ADDS',   Format:'R',     Width: 11,  OpCode:'10101011000',   Shamt:'',Start:'558',End:'',},
{Mnemonic:'AND',    Format:'R',     Width: 11,  OpCode:'10001010000',   Shamt:'',Start:'450',End:'',},
{Mnemonic:'ANDI',   Format:'I',     Width: 10,  OpCode:'1001001000',    Shamt:'X',Start:'490',End:'491',},
{Mnemonic:'ANDIS',  Format:'I',     Width: 10,  OpCode:'1111001000',    Shamt:'X',Start:'790',End:'791',},
{Mnemonic:'ANDS',   Format:'R',     Width: 11,  OpCode:'11101010000',   Shamt:'',Start:'750',End:'',},
{Mnemonic:'B',      Format:'B',     Width: 6,   OpCode:'000101',        Shamt:'XXXX',Start:'OA0',End:'OBF',},
{Mnemonic:'B.Cond', Format:'CB',    Width: 8,   OpCode:'01010100',      Shamt:'XXX',Start:'2A0',End:'2A7',},
{Mnemonic:'BL',     Format:'B',     Width: 6,   OpCode:'100101',        Shamt:'XXXX',Start:'4A0',End:'4BF',},
{Mnemonic:'BR',     Format:'R',     Width: 11,  OpCode:'11010110000',   Shamt:'',Start:'6B0',End:'',},
{Mnemonic:'CBNZ',   Format:'CB',    Width: 8,   OpCode:'10110101',      Shamt:'XXX',Start:'5A8',End:'5AF',},
{Mnemonic:'CBZ',    Format:'CB',    Width: 8,   OpCode:'10110100',      Shamt:'XXX',Start:'SA0',End:'5A7',},
{Mnemonic:'EOR',    Format:'R',     Width: 11,  OpCode:'11001010000',   Shamt:'',Start:'650',End:'',},
{Mnemonic:'EORI',   Format:'I',     Width: 10,  OpCode:'1101001000',    Shamt:'X',Start:'690',End:'691',},
{Mnemonic:'FADDD',  Format:'R',     Width: 11,  OpCode:'00011110011',   Shamt:'001010',Start:'OF3',End:'',},
{Mnemonic:'FADDS',  Format:'R',     Width: 11,  OpCode:'00011110001',   Shamt:'001010',Start:'OF1',End:'',},
{Mnemonic:'FCMPD',  Format:'R',     Width: 11,  OpCode:'00011110011',   Shamt:'001000',Start:'OF3',End:'',},
{Mnemonic:'FCMPS',  Format:'R',     Width: 11,  OpCode:'00011110001',   Shamt:'001000',Start:'OF1',End:'',},
{Mnemonic:'FDIVD',  Format:'R',     Width: 11,  OpCode:'00011110011',   Shamt:'000110',Start:'OF3',End:'',},
{Mnemonic:'FDIVS',  Format:'R',     Width: 11,  OpCode:'00011110001',   Shamt:'000110',Start:'OF1',End:'',},
{Mnemonic:'FMULD',  Format:'R',     Width: 11,  OpCode:'00011110011',   Shamt:'000010',Start:'OF3',End:'',},
{Mnemonic:'FMULS',  Format:'R',     Width: 11,  OpCode:'00011110001',   Shamt:'000010',Start:'OF1',End:'',},
{Mnemonic:'FSUBD',  Format:'R',     Width: 11,  OpCode:'00011110011',   Shamt:'001110',Start:'OF3',End:'',},
{Mnemonic:'FSUBS',  Format:'R',     Width: 11,  OpCode:'00011110001',   Shamt:'001110',Start:'OF1',End:'',},
{Mnemonic:'LDUR',   Format:'D',     Width: 11,  OpCode:'11111000010',   Shamt:'',Start:'7C2',End:'',},
{Mnemonic:'LDURB',  Format:'D',     Width: 11,  OpCode:'00111000010',   Shamt:'',Start:'IC2',End:'',},
{Mnemonic:'LDURD',  Format:'R',     Width: 11,  OpCode:'11111100010',   Shamt:'',Start:'7E2',End:'',},
{Mnemonic:'LDURH',  Format:'D',     Width: 11,  OpCode:'01111000010',   Shamt:'',Start:'3C2',End:'',},
{Mnemonic:'LDURS',  Format:'R',     Width: 11,  OpCode:'10111100010',   Shamt:'',Start:'5E2',End:'',},
{Mnemonic:'LDURSW', Format:'D',     Width: 11,  OpCode:'10111000100',   Shamt:'',Start:'5C4',End:'',},
{Mnemonic:'LDXR',   Format:'D',     Width: 11,  OpCode:'11001000010',   Shamt:'',Start:'642',End:'',},
{Mnemonic:'LSL',    Format:'R',     Width: 11,  OpCode:'11010011011',   Shamt:'',Start:'69B',End:'',},
{Mnemonic:'LSR',    Format:'R',     Width: 11,  OpCode:'11010011010',   Shamt:'',Start:'69A',End:'',},
{Mnemonic:'MOVE',   Format:'IM',    Width: 9,   OpCode:'110100101',     Shamt:'XX',Start:'694',End:'697',},
{Mnemonic:'MOVK',   Format:'IM',    Width: 9,   OpCode:'111100101',     Shamt:'XX',Start:'794',End:'797',},
{Mnemonic:'MUL',    Format:'R',     Width: 11,  OpCode:'10011011000',   Shamt:'011111',Start:'4D8',End:'',},
{Mnemonic:'ORR',    Format:'R',     Width: 11,  OpCode:'10101010000',   Shamt:'',Start:'550',End:'',},
{Mnemonic:'ORRI',   Format:'I',     Width: 10,  OpCode:'1011001000',    Shamt:'X',Start:'590',End:'591',},
{Mnemonic:'SDIV',   Format:'R',     Width: 11,  OpCode:'10011010110',   Shamt:'000010',Start:'4D6',End:'',},
{Mnemonic:'SMULH',  Format:'R',     Width: 11,  OpCode:'10011011010',   Shamt:'',Start:'4DA',End:'',},
{Mnemonic:'STUR',   Format:'D',     Width: 11,  OpCode:'11111000000',   Shamt:'',Start:'7C0',End:'',},
{Mnemonic:'STURB',  Format:'D',     Width: 11,  OpCode:'00111000000',   Shamt:'',Start:'IC0',End:'',},
{Mnemonic:'STURD',  Format:'R',     Width: 11,  OpCode:'11111100000',   Shamt:'',Start:'7E0',End:'',},
{Mnemonic:'STURH',  Format:'D',     Width: 11,  OpCode:'01111000000',   Shamt:'',Start:'3C0',End:'',},
{Mnemonic:'STURS',  Format:'R',     Width: 11,  OpCode:'10111100000',   Shamt:'',Start:'5E0',End:'',},
{Mnemonic:'STURW',  Format:'D',     Width: 11,  OpCode:'10111000000',   Shamt:'',Start:'5C0',End:'',},
{Mnemonic:'STXR',   Format:'D',     Width: 11,  OpCode:'11001000000',   Shamt:'',Start:'640',End:'',},
{Mnemonic:'SUB',    Format:'R',     Width: 11,  OpCode:'11001011000',   Shamt:'',Start:'658',End:'',},
{Mnemonic:'SUBI',   Format:'I',     Width: 10,  OpCode:'1101000100',    Shamt:'X',Start:'688',End:'689',},
{Mnemonic:'SUBIS',  Format:'I',     Width: 10,  OpCode:'1111000100',    Shamt:'X',Start:'788',End:'789',},
{Mnemonic:'SUBS',   Format:'R',     Width: 11,  OpCode:'11101011000',   Shamt:'',Start:'758',End:'',},
{Mnemonic:'UDIV',   Format:'R',     Width: 11,  OpCode:'10011010110',   Shamt:'000011',Start:'4D6',End:'',},
{Mnemonic:'UMULH',  Format:'R',     Width: 11,  OpCode:'10011011110',   Shamt:'',Start:'4DE',End:'',},
];

export function getInstructions(count) {
    let application = [];
    for (let i = 0; i < count; i++) {
        let rnd = getRandomInt(instructions.length);
        instructions[rnd].index = rnd
        application.push(instructions[rnd]);
    }
    return application;
}

export function getInstruction(index) {
    return instructions[index];
}

export let instructions = [
{Mnemonic:'MOVE',   Hex:'0xD28003E4',   Binary:'11010010100000000000001111100100',  Width: '9',     F0rmat:'IM',    OpCode: '110100101',        Breakdown:'0000000000000111110 100',    Instruction: 'MOV X4, #31',},
{Mnemonic:'MOVE',   Hex:'0xD28003E4',   Binary:'11010010100000000000001111100100',  Width: '9',     Format:'IM',    OpCode: '110100101',        Breakdown:'0000000000000111110 100',    Instruction: 'MOV X4, #31',},
{Mnemonic:'ORR',    Hex:'0xAA1F03EB',   Binary:'10101010000111110000001111101011',  Width: '11',    Format:'R',     OpCode: '10101010000',      Breakdown:'11111 000000 11111 01011',   Instruction: 'ORR X11, X31, X31',},
{Mnemonic:'B.Cond', Hex:'0x5400012B',   Binary:'01010100000000000000000100101011',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000001001 01011',  Instruction: 'B.Cond B.LT     DONE',},
{Mnemonic:'B.Cond', Hex:'0x5400010D',   Binary:'01010100000000000000000100001101',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000001000 01101',  Instruction: 'B.Cond B.LE     DONE',},
{Mnemonic:'B.Cond', Hex:'0x540000EA',   Binary:'01010100000000000000000011101010',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000000111 01010',  Instruction: 'B.Cond B.GE     DONE',},
{Mnemonic:'B.Cond', Hex:'0x540000CC',   Binary:'01010100000000000000000011001100',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000000110 01100',  Instruction: 'B.Cond B.GT     DONE',},
{Mnemonic:'B.Cond', Hex:'0x540000A0',   Binary:'01010100000000000000000010100000',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000000101 00000',  Instruction: 'B.Cond B.EQ     DONE',},
{Mnemonic:'B.Cond', Hex:'0x54000081',   Binary:'01010100000000000000000010000001',  Width: '8',     Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000000100 00001',  Instruction: 'B.Cond B.NE     DONE',},
{Mnemonic:'SUB',    Hex:'0xCB000000',   Binary:'11001011000000000000000000000000',  Width: '11',    Format:'R',     OpCode: '11001011000',      Breakdown:'00000 000000 00000 00000',   Instruction: 'SUB      x0,x0,x0',},
{Mnemonic:'ADDI',   Hex:'0x91002801',   Binary:'10010001000000000010100000000001',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000000001010 00000 00001',   Instruction: 'ADDI      x1,x0,#0xa',},
{Mnemonic:'SUBIS',  Hex:'0xF1000021',   Binary:'11110001000000000000000000100001',  Width: '10',    Format:'I',     OpCode: '1111000100',       Breakdown:'000000000000 00001 00001',   Instruction: 'SUBIS     x1,x1,#0',},
{Mnemonic:'B.Cond', Hex:'0x5400008D',   Binary:'01010100000000000000000010001101',  Width: ' 8',    Format:'CB',    OpCode: '01010100',         Breakdown:'0000000000000000100 01101',  Instruction: 'B.Cond     DONE ; 0x80001234. B.LE',},
{Mnemonic:'SUBI',   Hex:'0xD1000421',   Binary:'11010001000000000000010000100001',  Width: '10',    Format:'I',     OpCode: '1101000100',       Breakdown:'000000000001 00001 00001',   Instruction: 'SUBI      x1,x1,#1',},
{Mnemonic:'ADDI',   Hex:'0x91000800',   Binary:'10010001000000000000100000000000',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000000000010 00000 00000',   Instruction: 'ADDI      x0,x0,#2',},
{Mnemonic:'B',      Hex:'0x17FFFFFC',   Binary:'00010111111111111111111111111100',  Width: '6',     Format:'B',     OpCode: '000101',           Breakdown:'11111111111111111111111100', Instruction: 'B        L00P ; 0x80001220',},
{Mnemonic:'ADDI',   Hex:'0x9104C042',   Binary:'10010001000001001100000001000010',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000100110000 00010 00010',   Instruction: 'ADDI      x2,x2,#0x130',},
{Mnemonic:'LDURS',  Hex:'0xBC400042',   Binary:'10111100010000000000000001000010',  Width: '11',    Format:'R',     OpCode: '10111100010',      Breakdown:'00000 000000 00010 00010',   Instruction: 'LDURS     s2,[x2,#0]',},
{Mnemonic:'ADDI',   Hex:'0x9104E063',   Binary:'10010001000001001110000001100011',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000100111000 00011 00011',   Instruction: 'ADDI      x3,x3,#0x138',},
{Mnemonic:'BL',     Hex:'0x9400000E',   Binary:'10010100000000000000000000001110',  Width: '6',     Format:'B',     OpCode: '100101',           Breakdown:'00000000000000000000001110', Instruction: 'BL       dilation ; 0x80001280',},
{Mnemonic:'MOVE',   Hex:'0xD2800203',   Binary:'11010010100000000000001000000011',  Width: '9',     Format:'IM',    OpCode: '110100101',        Breakdown:'0000000000000100000 011',    Instruction: 'MOVE      x3,#0x10',},
{Mnemonic:'MOVE',   Hex:'0xD2800022',   Binary:'11010010100000000000000000100010',  Width: '9',     Format:'IM',    OpCode: '110100101',        Breakdown:'0000000000000000010 010',    Instruction: 'MOVE      x2,#1',},
{Mnemonic:'ADD',    Hex:'0x8B031044',   Binary:'10001011000000110001000001000100',  Width: '11',    Format:'R',     OpCode: '10001011000',      Breakdown:'00011 000100 00010 00100',   Instruction: 'ADD      x4,x2,x3,LSL #4',},
{Mnemonic:'SUBI',   Hex:'0xD10043FF',   Binary:'11010001000000000100001111111111',  Width: '10',    Format:'I',     OpCode: '1101000100',       Breakdown:'000000010000 11111 11111',   Instruction: 'SUBI      sp,sp,#0x10',},
{Mnemonic:'STUR',   Hex:'0xF80003E3',   Binary:'11111000000000000000001111100011',  Width: '11',    Format:'D',     OpCode: '11111000000',      Breakdown:'000000000 00 11111 00011',   Instruction: 'STUR     x3,[sp,#0]',},
{Mnemonic:'SUBI',   Hex:'0xD10043FF',   Binary:'11010001000000000100001111111111',  Width: '10',    Format:'I',     OpCode: '1101000100',       Breakdown:'000000010000 11111 11111',   Instruction: 'SUBI      sp,sp,#0x10',},
{Mnemonic:'STUR',   Hex:'0xF80003E2',   Binary:'11111000000000000000001111100010',  Width: '11',    Format:'D',     OpCode: '11111000000',      Breakdown:'000000000 00 11111 00010',   Instruction: 'STUR     x2,[sp,#0]',},
{Mnemonic:'LDUR',   Hex:'0xF84003E1',   Binary:'11111000010000000000001111100001',  Width: '11',    Format:'D',     OpCode: '11111000010',      Breakdown:'000000000 00 11111 00001',   Instruction: 'LDUR     x1,[sp,#0]',},
{Mnemonic:'ADDI',   Hex:'0x910043FF',   Binary:'10010001000000000100001111111111',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000000010000 11111 11111',   Instruction: 'ADDI      sp,sp,#0x10',},
{Mnemonic:'LDUR',   Hex:'0xF84003E1',   Binary:'11111000010000000000001111100001',  Width: '11',    Format:'D',     OpCode: '11111000010',      Breakdown:'000000000 00 11111 00001',   Instruction: 'LDUR     x1,[sp,#0]',},
{Mnemonic:'ADDI',   Hex:'0x910043FF',   Binary:'10010001000000000100001111111111',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000000010000 11111 11111',   Instruction: 'ADDI      sp,sp,#0x10',},
{Mnemonic:'BR',     Hex:'0xD65F03C0',   Binary:'11010110010111110000001111000000',  Width: '11',    Format:'R',     OpCode: '11010110000',      Breakdown:'11111 000000 11110 00000',   Instruction: 'BR   a.k.a. RET',},
{Mnemonic:'SUBI',   Hex:'0xD100C3FF',   Binary:'11010001000000001100001111111111',  Width: '10',    Format:'I',     OpCode: '1101000100',       Breakdown:'000000110000 11111 11111',   Instruction: 'SUBI      sp,sp,#0x30',},
{Mnemonic:'STUR',   Hex:'0xF80003E1',   Binary:'11111000000000000000001111100001',  Width: '11',    Format:'D',     OpCode: '11111000000',      Breakdown:'000000000 00 11111 00001',   Instruction: 'STUR     x1,[sp,#0]',},
{Mnemonic:'STURS',  Hex:'0xBC0103E1',   Binary:'10111100000000010000001111100001',  Width: '11',    Format:'R',     OpCode: '10111100000',      Breakdown:'00001 000000 11111 00001',   Instruction: 'STURS     s1,[sp,#0x10]',},
{Mnemonic:'STURS',  Hex:'0xBC0203E3',   Binary:'10111100000000100000001111100011',  Width: '11',    Format:'R',     OpCode: '10111100000',      Breakdown:'00010 000000 11111 00011',   Instruction: 'STURS     s3,[sp,#0x20]',},
{Mnemonic:'ADDI',   Hex:'0x9104D021',   Binary:'10010001000001001101000000100001',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000100110100 00001 00001',   Instruction: 'ADDI      x1,x1,#0x134',},
{Mnemonic:'LDURS',  Hex:'0xBC400021',   Binary:'10111100010000000000000000100001',  Width: '11',    Format:'R',     OpCode: '10111100010',      Breakdown:'00000 000000 00001 00001',   Instruction: 'LDURS     s1,[x1,#0]',},
{Mnemonic:'FDIVS',  Hex:'0x1E211843',   Binary:'00011110001000010001100001000011',  Width: '11',    Format:'R',     OpCode: '00011110001',      Breakdown:'00001 000110 00010 00011',   Instruction: 'FDIVS     s3,s2,s1',},
{Mnemonic:'FMULS',  Hex:'0x1E230863',   Binary:'00011110001000110000100001100011',  Width: '11',    Format:'R',     OpCode: '00011110001',      Breakdown:'00011 000010 00011 00011',   Instruction: 'FMULS     s3,s3,s3',},
{Mnemonic:'FSUBS',  Hex:'0x1E233823',   Binary:'00011110001000110011100000100011',  Width: '11',    Format:'R',     OpCode: '00011110001',      Breakdown:'00011 001110 00001 00011',   Instruction: 'FSUBS     s3,s1,s3',},
{Mnemonic:'FDIVS',  Hex:'0x1E231823',   Binary:'00011110001000110001100000100011',  Width: '11',    Format:'R',     OpCode: '00011110001',      Breakdown:'00011 000110 00001 00011',   Instruction: 'FDIVS     s3,s1,s3',},
{Mnemonic:'STURS',  Hex:'0xBC000063',   Binary:'10111100000000000000000001100011',  Width: '11',    Format:'R',     OpCode: '10111100000',      Breakdown:'00000 000000 00011 00011',   Instruction: 'STURS     s3,[x3,#0]',},
{Mnemonic:'LDURS',  Hex:'0xBC4203E3',   Binary:'10111100010000100000001111100011',  Width: '11',    Format:'R',     OpCode: '10111100010',      Breakdown:'00010 000000 11111 00011',   Instruction: 'LDURS     s3,[sp,#0x20]',},
{Mnemonic:'LDURS',  Hex:'0xBC4103E1',   Binary:'10111100010000010000001111100001',  Width: '11',    Format:'R',     OpCode: '10111100010',      Breakdown:'00001 000000 11111 00001',   Instruction: 'LDURS     s1,[sp,#0x10]',},
{Mnemonic:'LDUR',   Hex:'0xF84003E1',   Binary:'11111000010000000000001111100001',  Width: '11',    Format:'D',     OpCode: '11111000010',      Breakdown:'000000000 00 11111 00001',   Instruction: 'LDUR     x1,[sp,#0]',},
{Mnemonic:'ADDI',   Hex:'0x9100C3FF',   Binary:'10010001000000001100001111111111',  Width: '10',    Format:'I',     OpCode: '1001000100',       Breakdown:'000000110000 11111 11111',   Instruction: 'ADDI      sp,sp,#0x33',},
{Mnemonic:'BR',     Hex:'0xD61F03C0',   Binary:'11010110000111110000001111000000',  Width: '11',    Format:'R',     OpCode: '11010110000',      Breakdown:'11111 000000 11110 00000',   Instruction: 'BR       x30',},
{Mnemonic:'SUB',    Hex:'0xCB0D02AE',   Binary:'11001011000011010000001010101110',  Width: '11',    Format:'R',     OpCode: '11001011000',      Breakdown:'01101 000000 10101 01110',   Instruction: 'SUB      x14,x21,x13',},
{Mnemonic:'AND',    Hex:'0X8A0D012B',   Binary:'10001010000011010000000100101011',  Width: '11',    Format:'R',     OpCode: '10001010000',      Breakdown:'01101 000000 01001 01011',   Instruction: '',},
]